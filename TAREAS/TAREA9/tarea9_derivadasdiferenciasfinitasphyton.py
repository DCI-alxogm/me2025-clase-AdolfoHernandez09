# -*- coding: utf-8 -*-
"""Tarea9_DerivadasDiferenciasFinitasPhyton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1St8bjMb3YMiY0c01DwnwoMJq0cXcRUZ3
"""

#Adolfo Hernandez Ramirez
#11/09/2025
#Esta es la version de phyton para el codigo que hice en c.


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Intervalos y valores de h y n.
a = -2.0
b = 2.0
h = 0.25
n = int((b - a) / h) + 1  # incluir ambos extremos

# Definimos la función y sus derivadas exactas
def fx(x):
    return x**3 - 2.0*x + 4.0

def dfx(x):
    return 3.0*x**2 - 2.0

def d2fx(x):
    return 6.0*x

# Arreglos que estaremos utilizando
x = np.linspace(a, b, n)
fpa = np.full(n, np.nan)
fpat = np.full(n, np.nan)
fpc = np.full(n, np.nan)
fprima = np.full(n, np.nan)

fdpa = np.full(n, np.nan)
fdpat = np.full(n, np.nan)
fdpc = np.full(n, np.nan)
fdprima = np.full(n, np.nan)

# Calculamos los valores de las derivadas reales
for i in range(n):
    fprima[i] = dfx(x[i])
    fdprima[i] = d2fx(x[i])

# Primera derivada.
for i in range(n):
    if i + 1 < n:  # adelante
        fpa[i] = (fx(x[i+1]) - fx(x[i])) / h
    if i - 1 >= 0:  # atrás
        fpat[i] = (fx(x[i]) - fx(x[i-1])) / h
    if (i - 1 >= 0) and (i + 1 < n):  # centrada
        fpc[i] = (fx(x[i+1]) - fx(x[i-1])) / (2.0*h)

# Segunda derivada
for i in range(n):
    if i + 2 < n:  # adelante
        fdpa[i] = (fx(x[i+2]) - 2.0*fx(x[i+1]) + fx(x[i])) / (h*h)
    if i - 2 >= 0:  # atrás
        fdpat[i] = (fx(x[i-2]) - 2.0*fx(x[i-1]) + fx(x[i])) / (h*h)
    if (i - 1 >= 0) and (i + 1 < n):  # centrada
        fdpc[i] = (fx(x[i+1]) - 2.0*fx(x[i]) + fx(x[i-1])) / (h*h)

# Guardar resultados en un CSV
df = pd.DataFrame({
    'x': x,
    "fp_adelante": fpa,
    "fp_atras": fpat,
    "fp_centrada": fpc,
    "fp_exacta": fprima,
    "fpp_adelante": fdpa,
    "fpp_atras": fdpat,
    "fpp_centrada": fdpc,
    "fpp_exacta": fdprima
})

df.to_csv("derivs.csv", index=False)
print("Archivo CSV generado: derivs.csv")

# ----------------------------
# Graficar primera derivada
plt.figure(figsize=(8,5))
plt.plot(df['x'], df['fp_exacta'], label="f' exacta", linewidth=2)
plt.plot(df['x'], df['fp_adelante'], marker='o', linestyle='--', label="f' adelante")
plt.plot(df['x'], df['fp_atras'], marker='x', linestyle='--', label="f' atrás")
plt.plot(df['x'], df['fp_centrada'], marker='s', linestyle='--', label="f' centrada")
plt.xlabel('x')
plt.ylabel("f'(x)")
plt.title("Primera derivada: aproximaciones vs exacta")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# ----------------------------
# Graficar segunda derivada
plt.figure(figsize=(8,5))
plt.plot(df['x'], df['fpp_exacta'], label="f'' exacta", linewidth=2)
plt.plot(df['x'], df['fpp_adelante'], marker='o', linestyle='--', label="f'' adelante")
plt.plot(df['x'], df['fpp_atras'], marker='x', linestyle='--', label="f'' atrás")
plt.plot(df['x'], df['fpp_centrada'], marker='s', linestyle='--', label="f'' centrada")
plt.xlabel('x')
plt.ylabel("f''(x)")
plt.title("Segunda derivada: aproximaciones vs exacta")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()